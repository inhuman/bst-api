// Code generated by mockery v1.1.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/inhuman/bst-api/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// Container is an autogenerated mock type for the Container type
type Container struct {
	mock.Mock
}

// Delete provides a mock function with given fields: n, key
func (_m *Container) Delete(n interfaces.TreeNode, key int) interfaces.TreeNode {
	ret := _m.Called(n, key)

	var r0 interfaces.TreeNode
	if rf, ok := ret.Get(0).(func(interfaces.TreeNode, int) interfaces.TreeNode); ok {
		r0 = rf(n, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.TreeNode)
		}
	}

	return r0
}

// Find provides a mock function with given fields: n, key
func (_m *Container) Find(n interfaces.TreeNode, key int) interface{} {
	ret := _m.Called(n, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interfaces.TreeNode, int) interface{}); ok {
		r0 = rf(n, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetRoot provides a mock function with given fields:
func (_m *Container) GetRoot() interfaces.TreeNode {
	ret := _m.Called()

	var r0 interfaces.TreeNode
	if rf, ok := ret.Get(0).(func() interfaces.TreeNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.TreeNode)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: n, key, value
func (_m *Container) Insert(n interfaces.TreeNode, key int, value interface{}) error {
	ret := _m.Called(n, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.TreeNode, int, interface{}) error); ok {
		r0 = rf(n, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
